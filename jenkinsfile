pipeline {
    agent { label 'linuxgit' }

    environment {
        GIT_REPO = 'https://github.com/venkypv168-ship-it/cmake-project.git'
        BRANCH = 'main'
        SONARQUBE_ENV = 'SonarCloud'
        SONAR_ORGANIZATION = 'venkypv168-ship-it'
        SONAR_PROJECT_KEY = 'venkypv168-ship-it_cmake_project'
        JAVA_HOME = "/usr/lib/jvm/java-21-openjdk"
        PATH = "${env.JAVA_HOME}/bin:${env.PATH}:${env.PATH}"
    }

    tools {
        // Optional if you configured Jenkins tools
        // sonarQubeScanner "sonar-scanner"
    }

    stages {
        stage('Prepare Tools') {
            steps {
                sh '''
                    sudo yum install -y python3 python3-pip dos2unix epel-release cmake gcc gcc-c++
                    pip3 install --quiet cmakelint
                '''
            }
        }

        stage('Clean Workspace') {
            steps {
                deleteDir()
            }
        }

        stage('Checkout') {
            steps {
                git branch: "${BRANCH}", url: "${GIT_REPO}"
            }
        }

        stage('Lint') {
            steps {
                sh '''
                    if [ -f src/main.c ]; then
                        cmakelint src/main.c > lint_report.txt
                    else
                        echo "main.c not found!"
                        exit 1
                    fi
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'lint_report.txt', fingerprint: true
                }
            }
        }

        stage('Build') {
            steps {
                sh '''
                    mkdir -p build && cd build
                    cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
                    make -j$(nproc)
                    cp compile_commands.json ..
                '''
            }
        }

        stage('Unit Tests') {
            steps {
                sh '''
                    cd build
                    ctest --output-on-failure || true
                '''
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    sh '''
                        sonar-scanner \
                          -Dsonar.organization=${SONAR_ORGANIZATION} \
                          -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                          -Dsonar.sources=src \
                          -Dsonar.cfamily.compile-commands=compile_commands.json \
                          -Dsonar.host.url=https://sonarcloud.io \
                          -Dsonar.sourceEncoding=UTF-8
                    '''
                }
            }
        }
    }

    post {
        success {
            echo '✅ Build, lint, and SonarCloud analysis completed successfully!'
        }
        failure {
            echo '❌ Pipeline failed. Check Jenkins logs or SonarCloud dashboard.'
        }
    }
}
